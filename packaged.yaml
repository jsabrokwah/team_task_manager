AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  JWTSecretKey:
    Type: String
    NoEcho: true
    Description: Secret key for JWT token generation
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: Users-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
    Metadata:
      SamResourceId: UsersTable
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: Tasks-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: task_id
        AttributeType: S
      - AttributeName: assigned_to
        AttributeType: S
      - AttributeName: status
        AttributeType: S
      - AttributeName: due_date
        AttributeType: S
      KeySchema:
      - AttributeName: task_id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: AssignedToIndex
        KeySchema:
        - AttributeName: assigned_to
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      - IndexName: StatusIndex
        KeySchema:
        - AttributeName: status
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      - IndexName: DueDateIndex
        KeySchema:
        - AttributeName: due_date
          KeyType: HASH
        Projection:
          ProjectionType: ALL
    Metadata:
      SamResourceId: TasksTable
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      BucketName:
        Fn::Sub: task-management-static-${AWS::AccountId}-${AWS::Region}
    Metadata:
      SamResourceId: StaticWebsiteBucket
  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${StaticWebsiteBucket.Arn}/*
    Metadata:
      SamResourceId: StaticWebsiteBucketPolicy
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for task management system static website
    Metadata:
      SamResourceId: CloudFrontOriginAccessIdentity
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::GetAtt:
            - StaticWebsiteBucket
            - RegionalDomainName
          Id: S3Origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
    Metadata:
      SamResourceId: CloudFrontDistribution
  FlaskFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: FlaskFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
            - Fn::GetAtt:
              - UsersTable
              - Arn
            - Fn::GetAtt:
              - TasksTable
              - Arn
            - Fn::Sub: ${TasksTable.Arn}/index/*
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
              Ref: TaskNotificationTopic
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
    Metadata:
      SamResourceId: FlaskFunctionRole
  ReminderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ReminderFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            Resource:
            - Fn::GetAtt:
              - TasksTable
              - Arn
            - Fn::GetAtt:
              - UsersTable
              - Arn
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
              Ref: TaskNotificationTopic
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
    Metadata:
      SamResourceId: ReminderFunctionRole
  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://task-management-deployment-bucket/8f709a797cd9b222c605c8c65385faaa
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 30
      Role:
        Fn::GetAtt:
        - FlaskFunctionRole
        - Arn
      Environment:
        Variables:
          TASK_NOTIFICATION_TOPIC:
            Ref: TaskNotificationTopic
          JWT_SECRET_KEY:
            Ref: JWTSecretKey
          JWT_ACCESS_TOKEN_EXPIRES: 3600
          JWT_REFRESH_TOKEN_EXPIRES: 604800
          TASKS_TABLE:
            Ref: TasksTable
          USERS_TABLE:
            Ref: UsersTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TasksTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: FlaskFunction
  TaskNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: TaskNotifications-${AWS::StackName}
      DisplayName: Task Notifications
    Metadata:
      SamResourceId: TaskNotificationTopic
  ReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://task-management-deployment-bucket/40caa0111952a29b5dcb346c6ee88c24
      Handler: reminder_function.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 60
      Role:
        Fn::GetAtt:
        - ReminderFunctionRole
        - Arn
      Environment:
        Variables:
          TASK_NOTIFICATION_TOPIC:
            Ref: TaskNotificationTopic
          TASKS_TABLE:
            Ref: TasksTable
          USERS_TABLE:
            Ref: UsersTable
      Policies:
      - SNSPublishMessagePolicy:
          TopicName: TaskNotifications
      - DynamoDBReadPolicy:
          TableName:
            Ref: TasksTable
      - DynamoDBReadPolicy:
          TableName:
            Ref: UsersTable
    Metadata:
      SamResourceId: ReminderFunction
  ReminderRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
      - Arn:
          Fn::GetAtt:
          - ReminderFunction
          - Arn
        Id: ReminderTarget
    Metadata:
      SamResourceId: ReminderRule
  ReminderFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ReminderFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ReminderRule
        - Arn
    Metadata:
      SamResourceId: ReminderFunctionPermission
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for the Flask application
    Value:
      Fn::Sub: https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
  WebsiteURL:
    Description: URL for the S3 website
    Value:
      Fn::GetAtt:
      - StaticWebsiteBucket
      - WebsiteURL
  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value:
      Fn::Sub: https://${CloudFrontDistribution.DomainName}
