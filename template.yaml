# This is an AWS SAM template for a serverless application with Flask backend, DynamoDB, S3, and SNS.
# It includes a static website hosted on S3, a Flask application for backend processing,
# a DynamoDB table for users and tasks, and an SNS topic for task notifications.
# The template also includes a scheduled event to trigger a reminder function daily.

# Note: Ensure you have the AWS SAM CLI installed to deploy this template.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  JWTSecretKey:
    Type: String
    NoEcho: true
    Description: Secret key for JWT token generation

Resources:
  # DynamoDB Tables
  # Users table to store user information
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Users-${AWS::StackName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  # Tasks table to store task information
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Tasks-${AWS::StackName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: task_id
          AttributeType: S
        - AttributeName: assigned_to
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: due_date
          AttributeType: S
      KeySchema:
        - AttributeName: task_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assigned_to
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: DueDateIndex
          KeySchema:
            - AttributeName: due_date
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # S3 Bucket for static website hosting
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketName: !Sub "task-management-static-${AWS::AccountId}-${AWS::Region}"

  # IAM Roles for Lambda Functions
  # Role for Flask function to interact with DynamoDB and SNS
  FlaskFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FlaskFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt TasksTable.Arn
                  - !Sub "${TasksTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TaskNotificationTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Role for Reminder function to scan tasks and send notifications
  ReminderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReminderFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: 
                  - !GetAtt TasksTable.Arn
                  - !GetAtt UsersTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TaskNotificationTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Flask application for backend processing
  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: flask-backend/
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt FlaskFunctionRole.Arn
      Environment:
        Variables:
          TASK_NOTIFICATION_TOPIC: !Ref TaskNotificationTopic
          JWT_SECRET_KEY: !Ref JWTSecretKey
          JWT_ACCESS_TOKEN_EXPIRES: 3600
          JWT_REFRESH_TOKEN_EXPIRES: 604800
          TASKS_TABLE: !Ref TasksTable
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: UsersTable
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: TasksTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY

  # SNS Topic for task notifications
  TaskNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "TaskNotifications-${AWS::StackName}"
      DisplayName: Task Notifications

  # Reminder function to send daily reminders about tasks
  ReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: events/
      Handler: reminder_function.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt ReminderFunctionRole.Arn
      Environment:
        Variables:
          TASK_NOTIFICATION_TOPIC: !Ref TaskNotificationTopic
          TASKS_TABLE: !Ref TasksTable
          USERS_TABLE: !Ref UsersTable
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TaskNotificationTopic.TopicName
        - DynamoDBReadPolicy:
            TableName:
              Ref: TasksTable
        - DynamoDBReadPolicy:
            TableName:
              Ref: UsersTable

  ReminderRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt ReminderFunction.Arn
          Id: ReminderTarget

  # Permission for EventBridge to invoke the reminder function
  ReminderFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ReminderFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ReminderRule.Arn

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for the Flask application"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  
  WebsiteURL:
    Description: "URL for the S3 website"
    Value: !GetAtt StaticWebsiteBucket.WebsiteURL