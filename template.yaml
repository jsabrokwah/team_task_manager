AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: task_id
          AttributeType: S
        - AttributeName: assigned_to
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: task_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assigned_to
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      AccessControl: PublicRead
      BucketName: static-website-bucket

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: flask-backend/
      Handler: app.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: UsersTable
        - DynamoDBCrudPolicy:
            TableName: 
              Ref: TasksTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY

  TaskNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TaskNotifications

  ReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: events/
      Handler: reminder_function.lambda_handler
      Runtime: python3.11
      Policies:
        - SNSPublishMessagePolicy:
            TopicArn:
              Ref: TaskNotificationTopic
        - DynamoDBReadPolicy:
            TableName:
              Ref: TasksTable

  ReminderRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: 
            Arn: !GetAtt ReminderFunction.Arn
          Id: ReminderTarget